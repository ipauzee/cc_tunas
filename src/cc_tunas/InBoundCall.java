/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InBoundCall.java
 *
 * Created on Feb 15, 2010, 10:52:51 AM
 */

package cc_tunas;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.Timer;
import java.awt.*;
import java.awt.Event.*;
import java.awt.event.ActionEvent;
import java.sql.*;
import javax.sun.database.JavaConnector;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.io.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Date;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.net.*;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;

/**
 *
 * @author jsm
 */
public class InBoundCall extends javax.swing.JFrame {
    int sco=0;
    String s;
    public static String tic[]=new String[30];
    public static String cus[]=new String[20];

    public static String clbk=null, cldt=null, IdCust=null, condition;;
    public static long elapsed;
    public static long busy;

    String pabx, in_ext, out_ext;
//    String loid=null;
    public static Timer ti, ab;
    public static int blankcall, wrongnum, inquiry, complaint, callback, cllbck;
    public static int id, xxx=0, xx=0, ticid, x=0;
    public static String loid;
   public static boolean hangup = false;


    /** Creates new form InBoundCall */
    public InBoundCall() {
        initComponents();
        loid=CCanj.loid;
        txtcalnum.setText("");
        txtcalnum.setText(CCanj.callid);
        txtcalnm.getText().toUpperCase();
        lbldurasi.setText("");
        callback=0;blankcall=0;inquiry=0;complaint=0;wrongnum=0;
        this.setSize(338,490);
        tblcall.setModel(tabcall);
        tbltic.setModel(tabtic);
        tbcus(tblcall,new int []{100,120,100,100,150    ,100,150,150,500,80     ,-1});
        tbcus(tbltic,new int []{100,100,100,100,120      ,150,300,200,200,150
                ,250,200,150,250,120        ,120,120,120,250,500    ,500,-1,-1});
        showCaltype();        showCust();        showType();
        ab= new Timer(1000, acw);
//        txtcalbac.setText("");
//        date.setText("");
        
        
    }

    public static login Log;
    public InBoundCall(login log){
        this();
        this.Log=log;
    }

    public static ContactCenterTunas CCanj;
    public InBoundCall(ContactCenterTunas ccanj){
        this();
        this.CCanj=ccanj;
    }
    public ticket Tic;
    public InBoundCall(ticket tic){
        this();
        this.Tic=tic;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtcalnum = new javax.swing.JTextField();
        txtcalnm = new javax.swing.JTextField();
        ckblank = new javax.swing.JCheckBox();
        ckwrongno = new javax.swing.JCheckBox();
        ckinqui = new javax.swing.JCheckBox();
        ckcompl = new javax.swing.JCheckBox();
        btnHangUp = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtareacom = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtnotic = new javax.swing.JTextField();
        btnexpand = new javax.swing.JButton();
        btnreset = new javax.swing.JButton();
        btnopentic = new javax.swing.JButton();
        btnsave = new javax.swing.JButton();
        lbldurasi = new javax.swing.JLabel();
        cbcaltype = new javax.swing.JComboBox();
        btnmute = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        cbServiceArea = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cbInbType = new javax.swing.JComboBox();
        txtlogid = new javax.swing.JTextField();
        txtlogid1 = new javax.swing.JTextField();
        txtlogid2 = new javax.swing.JTextField();
        txtlogid3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnsrch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblcall = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        txtIdCust = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbltic = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("INBOUND CALL");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Call Details"));
        jPanel2.setFont(jPanel2.getFont().deriveFont((float)11));
        jPanel2.setLayout(null);

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setFont(jLabel1.getFont().deriveFont((float)11));
        jLabel1.setText("Caller Number");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(20, 50, 90, 20);

        jLabel2.setFont(jLabel2.getFont().deriveFont((float)11));
        jLabel2.setText("Name");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(20, 70, 90, 20);

        txtcalnum.setFont(txtcalnum.getFont().deriveFont((float)11));
        jPanel2.add(txtcalnum);
        txtcalnum.setBounds(110, 50, 200, 24);

        txtcalnm.setFont(txtcalnm.getFont().deriveFont((float)11));
        jPanel2.add(txtcalnm);
        txtcalnm.setBounds(110, 70, 200, 24);
        txtcalnm.getText().toUpperCase();

        ckblank.setBackground(new java.awt.Color(255, 255, 255));
        ckblank.setFont(ckblank.getFont().deriveFont((float)11));
        ckblank.setFont(ckblank.getFont().deriveFont((float)11));
        ckblank.setText("BLANK CALL");
        ckblank.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ckblankMouseClicked(evt);
            }
        });
        jPanel2.add(ckblank);
        ckblank.setBounds(10, 20, 100, 20);

        ckwrongno.setBackground(new java.awt.Color(255, 255, 255));
        ckwrongno.setFont(ckwrongno.getFont().deriveFont((float)11));
        ckwrongno.setText("WRONG NUMBER");
        jPanel2.add(ckwrongno);
        ckwrongno.setBounds(180, 20, 130, 20);

        ckinqui.setBackground(new java.awt.Color(255, 255, 255));
        ckinqui.setFont(ckinqui.getFont().deriveFont((float)11));
        ckinqui.setText("INQUIRY");
        jPanel2.add(ckinqui);
        ckinqui.setBounds(10, 180, 100, 20);

        ckcompl.setBackground(new java.awt.Color(255, 255, 255));
        ckcompl.setFont(ckcompl.getFont().deriveFont((float)11));
        ckcompl.setText("COMPLAINT");
        jPanel2.add(ckcompl);
        ckcompl.setBounds(10, 200, 100, 20);

        btnHangUp.setFont(btnHangUp.getFont().deriveFont(btnHangUp.getFont().getStyle() | java.awt.Font.BOLD, 11));
        btnHangUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/4.jpg"))); // NOI18N
        btnHangUp.setText("Hang UP");
        btnHangUp.setEnabled(false);
        btnHangUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnHangUpMouseEntered(evt);
            }
        });
        btnHangUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHangUpActionPerformed(evt);
            }
        });
        jPanel2.add(btnHangUp);
        btnHangUp.setBounds(170, 410, 140, 20);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        txtareacom.setColumns(20);
        txtareacom.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txtareacom.setLineWrap(true);
        txtareacom.setRows(5);
        jScrollPane2.setViewportView(txtareacom);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel3);
        jPanel3.setBounds(10, 220, 300, 190);

        jLabel3.setFont(jLabel3.getFont().deriveFont((float)11));
        jLabel3.setText("Inbound Type");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(20, 150, 90, 20);

        jLabel4.setFont(jLabel4.getFont().deriveFont((float)11));
        jLabel4.setText("Ticket No.");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(20, 130, 90, 20);

        txtnotic.setEditable(false);
        txtnotic.setFont(txtnotic.getFont().deriveFont((float)11));
        txtnotic.setEnabled(false);
        jPanel2.add(txtnotic);
        txtnotic.setBounds(110, 130, 100, 24);

        btnexpand.setFont(btnexpand.getFont().deriveFont((float)11));
        btnexpand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/1245117595_001_37.png"))); // NOI18N
        btnexpand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexpandActionPerformed(evt);
            }
        });
        jPanel2.add(btnexpand);
        btnexpand.setBounds(210, 130, 20, 24);

        btnreset.setFont(btnreset.getFont().deriveFont(btnreset.getFont().getStyle() | java.awt.Font.BOLD, 11));
        btnreset.setText("Reset");
        btnreset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnresetMouseClicked(evt);
            }
        });
        jPanel2.add(btnreset);
        btnreset.setBounds(240, 130, 70, 24);

        btnopentic.setFont(btnopentic.getFont().deriveFont(btnopentic.getFont().getStyle() | java.awt.Font.BOLD, 11));
        btnopentic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/tic.jpg"))); // NOI18N
        btnopentic.setText("Open Ticket");
        btnopentic.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        btnopentic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnopenticActionPerformed(evt);
            }
        });
        jPanel2.add(btnopentic);
        btnopentic.setBounds(170, 200, 140, 24);

        btnsave.setFont(btnsave.getFont().deriveFont(btnsave.getFont().getStyle() | java.awt.Font.BOLD, 11));
        btnsave.setText("Save");
        btnsave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsaveActionPerformed(evt);
            }
        });
        jPanel2.add(btnsave);
        btnsave.setBounds(10, 410, 70, 24);

        lbldurasi.setFont(lbldurasi.getFont().deriveFont(lbldurasi.getFont().getStyle() | java.awt.Font.BOLD, 11));
        lbldurasi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbldurasi.setToolTipText("");
        jPanel2.add(lbldurasi);
        lbldurasi.setBounds(80, 410, 90, 20);

        cbcaltype.setFont(cbcaltype.getFont().deriveFont((float)11));
        cbcaltype.setMaximumRowCount(9);
        cbcaltype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Non-customer", "Customer-Driver", "Customer-User", "Customer-PIC", "Customer-Other", "Internal-ANJ", "Internal-CC", "Internal-CSO", "Internal-Driver", "Internal-Other" }));
        jPanel2.add(cbcaltype);
        cbcaltype.setBounds(110, 90, 200, 24);

        btnmute.setFont(btnmute.getFont().deriveFont(btnmute.getFont().getStyle() | java.awt.Font.BOLD, 11));
        btnmute.setForeground(new java.awt.Color(0, 102, 102));
        btnmute.setText("Mute");
        btnmute.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnmuteMouseClicked(evt);
            }
        });
        jPanel2.add(btnmute);
        btnmute.setBounds(220, 430, 90, 20);

        jLabel16.setFont(jLabel16.getFont().deriveFont((float)11));
        jLabel16.setText("Area");
        jPanel2.add(jLabel16);
        jLabel16.setBounds(20, 110, 90, 20);

        cbServiceArea.setFont(cbServiceArea.getFont().deriveFont((float)11));
        cbServiceArea.setMaximumRowCount(9);
        cbServiceArea.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Non-customer", "Customer-Driver", "Customer-User", "Customer-PIC", "Customer-Other", "Internal-ANJ", "Internal-CC", "Internal-CSO", "Internal-Driver", "Internal-Other" }));
        jPanel2.add(cbServiceArea);
        cbServiceArea.setBounds(110, 110, 200, 24);

        jLabel5.setFont(jLabel5.getFont().deriveFont((float)11));
        jLabel5.setText("Caller Type");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(20, 90, 90, 20);

        cbInbType.setFont(cbInbType.getFont().deriveFont((float)11));
        cbInbType.setMaximumRowCount(9);
        cbInbType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Non-customer", "Customer-Driver", "Customer-User", "Customer-PIC", "Customer-Other", "Internal-ANJ", "Internal-CC", "Internal-CSO", "Internal-Driver", "Internal-Other" }));
        jPanel2.add(cbInbType);
        cbInbType.setBounds(110, 150, 200, 24);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 0, 330, 460);

        txtlogid.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        txtlogid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtlogidActionPerformed(evt);
            }
        });
        getContentPane().add(txtlogid);
        txtlogid.setBounds(10, 770, 199, 20);

        txtlogid1.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        getContentPane().add(txtlogid1);
        txtlogid1.setBounds(80, 770, 199, 20);

        txtlogid2.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        getContentPane().add(txtlogid2);
        txtlogid2.setBounds(80, 770, 199, 20);

        txtlogid3.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        getContentPane().add(txtlogid3);
        txtlogid3.setBounds(80, 770, 199, 20);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Call History"));
        jPanel1.setFont(jPanel1.getFont().deriveFont((float)11));
        jPanel1.setLayout(null);

        btnsrch.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        btnsrch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/1245117595_001_37.png"))); // NOI18N
        btnsrch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsrchActionPerformed(evt);
            }
        });
        jPanel1.add(btnsrch);
        btnsrch.setBounds(640, 20, 24, 24);

        jScrollPane1.setAutoscrolls(true);

        tblcall.setAutoCreateRowSorter(true);
        tblcall.setFont(tblcall.getFont().deriveFont((float)11));
        tblcall.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblcall.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblcall.setDoubleBuffered(true);
        tblcall.setFillsViewportHeight(true);
        tblcall.setOpaque(false);
        tblcall.setRowHeight(18);
        tblcall.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblcallMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblcall);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 40, 650, 180);

        jLabel23.setBackground(new java.awt.Color(102, 102, 255));
        jLabel23.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel23.setText("Contract No :"); // NOI18N
        jPanel1.add(jLabel23);
        jLabel23.setBounds(400, 20, 100, 20);

        txtIdCust.setEditable(false);
        txtIdCust.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtIdCust.setEnabled(false);
        jPanel1.add(txtIdCust);
        txtIdCust.setBounds(500, 20, 140, 24);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(330, 0, 690, 240);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Ticket history"));
        jPanel4.setFont(jPanel4.getFont().deriveFont((float)11));
        jPanel4.setLayout(null);

        tbltic.setAutoCreateRowSorter(true);
        tbltic.setFont(tbltic.getFont().deriveFont((float)11));
        tbltic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbltic.setOpaque(false);
        tbltic.setRowHeight(18);
        tbltic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblticMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbltic);

        jPanel4.add(jScrollPane3);
        jScrollPane3.setBounds(20, 30, 650, 170);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(330, 240, 690, 220);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnopenticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnopenticActionPerformed
        // TODO add your handling code here:
        ticket tic=new ticket();
        tic.setVisible(true);

        Tic.newtic=true;
}//GEN-LAST:event_btnopenticActionPerformed

    private void btnexpandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexpandActionPerformed
        // TODO add your handling code here:
        if (sco==0){
            this.setSize(1024,490);
            tabelcall();tabeltic();
            sco++;
        }else{
            this.setSize(338,490);
            sco=0;
        }
}//GEN-LAST:event_btnexpandActionPerformed

    private void btnresetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnresetMouseClicked
        // TODO add your handling code here:
        txtnotic.setText("");
    }//GEN-LAST:event_btnresetMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        CCanj.inshow=false;
        if (xx==1){
            dataregis();
            xx=0;
            String S;
            acwstop();
            ab.stop();
            sql="update log_phone set busy='"+busy+"' where log_id='"+loid+"'";
             CCanj.jconn.SQLExecute(sql, CCanj.conn);
            int i=JOptionPane.showConfirmDialog(null, "Ready to receive next Inbound Call ?","Exit",JOptionPane.YES_NO_OPTION);
            if (i==JOptionPane.YES_OPTION){
                CCanj.s = "REGISTER|"+pabx+"|"+in_ext+"|"+in_ext+"\r\n";
                CCanj.kirimTele();
                CCanj.lblactivity.setText("Registered");
                sql1="update user_account set _activity=4, time_activity=CURRENT_TIMESTAMP where username= '" +CCanj.lbluser.getText()+ "' limit 1";
                CCanj.jconn.SQLExecute(sql1, CCanj.conn);
//                System.out.print("registerulang");
            }else{
                CCanj.btnready.setText("Ready");
                CCanj.btncall.setEnabled(false);
                CCanj.btnsms.setEnabled(false);
                CCanj.btnmail.setEnabled(false);
                CCanj.btnfax.setEnabled(false);
                CCanj.cbdirection.setEnabled(true);
                CCanj.btnlogout.setEnabled(true);
                CCanj.s = "UNREGISTER|"+pabx+"|"+in_ext+"|"+in_ext+"\r\n";
                CCanj.kirimTele();
                CCanj.lblactivity.setText("Disconnected");
                CCanj.counter=0;
                sql1="update user_account set _mode=NULL ,_activity=1, time_activity=CURRENT_TIMESTAMP where username= '" +CCanj.lbluser.getText()+ "' limit 1";
                CCanj.jconn.SQLExecute(sql1, CCanj.conn);
            }
        }
        IdCust=null;
        CCanj.tabelin();
//        try {
//            conn.close();
//        } catch (SQLException ex) {
//            System.err.println(ex.getMessage());
//        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(xxx==0){
            if (hangup==false){
                JOptionPane.showMessageDialog(null,"Hang Up the phone first");
            }else{
                dispose();
            }
        }else{
            if (hangup==false){
                JOptionPane.showMessageDialog(null,"Hang Up the phone first");
            }else{
                JOptionPane.showMessageDialog(null,"Data Incomplete, Please fill Date and time first");
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void ckblankMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ckblankMouseClicked
        // TODO add your handling code here:
        if (ckblank.isSelected()==true){
            blankcall=1;
            ckinqui.setEnabled(false);
            ckcompl.setEnabled(false);
//            ckcalbac.setEnabled(false);
        }else{
            blankcall=0;
            ckinqui.setEnabled(true);
            ckcompl.setEnabled(true);
//            ckcalbac.setEnabled(true);
        }
    }//GEN-LAST:event_ckblankMouseClicked

    private void btnHangUpMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHangUpMouseEntered
        // TODO add your handling code here:
        if(txtcalnm.getText().equals("")){
            
        }
    }//GEN-LAST:event_btnHangUpMouseEntered
boolean mute=false;
    private void btnmuteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnmuteMouseClicked
        // TODO add your handling code here:
//        connecttele();
        if(mute==false){
            btnmute.setText("Unmute");
            btnmute.setForeground(Color.red);
            s = "MUTE\r\n";
            CCanj.kirimTele();
              mute=true;
        }else{
            btnmute.setText("Mute");
            btnmute.setForeground(Color.black);
//            btnmute.setForeground(Color.getHSBColor( 180, 100, 40));
            s = "UNMUTE\r\n";
            CCanj.kirimTele();
            mute=false;
        }
    }//GEN-LAST:event_btnmuteMouseClicked

    private void btnHangUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHangUpActionPerformed
        // TODO add your handling code here:
//        if(){


            if(!txtcalnm.getText().equals("")){
                optm();
                opdt();
                String tgl=optm.replace(':','.');
                String notic=txtnotic.getText();
    //            String nmfl="[JSM] "+opdt+" IN "+CCanj.lbluser.getText()+" "+tgl+" "+txtcalnm.getText()+".wav";
                String nmfl=""+opdt+" IN "+CCanj.lbluser.getText()+" "+tgl+" "+txtcalnm.getText()+".wav";

                stop();
                ti.stop();
                CCanj.s = "HANGUP|"+nmfl+"\r\n";
                CCanj.kirimTele();
                s=null;
                JOptionPane.showMessageDialog(null, "CALL DISCONNECTED", "INCOMING CALL",JOptionPane.WARNING_MESSAGE);
                if (txtnotic.getText().equals("")){
                    notic=null;
                }
                sql="update log_phone set duration='"+lbldurasi.getText()+"', _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', caller_name='"+txtcalnm.getText()+"', comment='"+txtareacom.getText()+"', ticket_no='"+notic+"', filename='"+nmfl+"', cust_name='"+cbServiceArea.getSelectedItem()+"' where log_id='"+loid+"'";
                CCanj.jconn.SQLExecute(sql, CCanj.conn);
                sql1="update user_account set _activity=5, time_activity=CURRENT_TIMESTAMP where username= '" +CCanj.lbluser.getText()+ "' limit 1";
                CCanj.jconn.SQLExecute(sql1, CCanj.conn);
                acwstart();
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(InBoundCall.class.getName()).log(Level.SEVERE, null, ex);
                }
    //            s = "UPLOAD|RECORDING|"+nmfl+"|192.168.0.32|anj\r\n";
                CCanj.s = "UPLOAD|RECORDING|"+nmfl+"|"+Log.ftpserverRec+"|"+Log.ftpuserRec+"\r\n";
                CCanj.kirimUplo();
                JOptionPane.showMessageDialog(null, "RECORDING "+nmfl+" Has been uploaded", "OUTGOING CALL",JOptionPane.WARNING_MESSAGE);
                //                  System.out.print(s);
                hangup=true;
                acwstart();
                ab.start();
                CCanj.lblactivity.setText("Disconnected");
                btnHangUp.setEnabled(false);
            }else{
                JOptionPane.showMessageDialog(null, "Caller Name cannot be empty", "INCOMING CALL",JOptionPane.WARNING_MESSAGE);
            }
//        }
    }//GEN-LAST:event_btnHangUpActionPerformed

    private void txtlogidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtlogidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtlogidActionPerformed

    private void btnsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsaveActionPerformed
        // TODO add your handling code here:
        if(cbServiceArea.getSelectedIndex()!=-1){
            String notic=txtnotic.getText();
            condition="";
            if(notic!=null){
                notic="'"+notic+"'";
            }
            if(IdCust!=null){
                IdCust="'"+IdCust+"'";
            }
            acwstop();
//            clbk=date.getText();
//            cldt=clbk.substring(6,10)+"-"+clbk.substring(3,5)+"-"+clbk.substring(0,2);
    //        clbk = sdf.format(dt2);
            if(ckwrongno.isSelected()==true){
                wrongnum=1;
            }else{
                wrongnum=0;
            }
            if(ckcompl.isSelected()==true){
                complaint=1;
            }else{
                complaint=0;
            }
            if(ckinqui.isSelected()==true){
                inquiry=1;
            }else{
                inquiry=0;
            }
//            if(ckcalbac.isSelected()==true){
//                callback=1;
//                txtcalbac.setEnabled(true);
//                date.setEnabled(true);
//    //            ambilTgl();
//            }else{
//                callback=0;
//                txtcalbac.setText("");
//                txtcalbac.setEnabled(false);
//                date.setEnabled(false);
//            }
            if (ckblank.isSelected()==true){
                blankcall=1;
            }else{
                blankcall=0;
            }
            if (txtnotic.getText().equals("")){
                notic=null;
            }
            if(blankcall==0){
                 if(txtcalnum.getText().equals("")||txtcalnm.getText().equals("")){
                    JOptionPane.showMessageDialog(null,"Data Incomplete, Please fill Caller Name first");
                }else{
//                     System.out.print("d dalem save \n"+loid);
                     if(CCanj.inshow==true){
    //                     sql="update log_phone set duration='"+lbldurasi.getText()+"', busy='"+busy+"', _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', caller_name='"+txtcalnm.getText()+"', comment='"+txtareacom.getText()+"', ticket_id='"+notic+"', _callback='"+callback+"', callback_time='"+cldt+" "+txtcalbac.getText()+"', _wrongnumber='"+wrongnum+"' where log_id='"+loid+"'";
                         sql="update log_phone set _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', comment='"+txtareacom.getText()+"'"
                                 + ", ticket_no="+notic+", ticket_id=(select ticket_id from tickets where ticket_no="+notic+")"
                                 + ", _wrongnumber='"+wrongnum+"', cust_name='"+cbServiceArea.getSelectedItem()+"', inbound_type='"+cbInbType.getSelectedItem()+"', contract_no="+IdCust+""
                                 + " where log_id='"+loid+"'";
                         CCanj.jconn.SQLExecute(sql, CCanj.conn);
    //                     System.out.print("update click 2x \n"+sql);
                         JOptionPane.showMessageDialog(null,"Data successfully updated");
                         xxx=0;
                         callback=0;blankcall=0;inquiry=0;complaint=0;wrongnum=0;
                         dispose();
                     }else{
    //                     if (callback==1 || (!clbk.equals(null)) || (!txtcalbac.getText().equals(""))){
    //                         sql="update log_phone set duration='"+lbldurasi.getText()+"', busy='"+busy+"', _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', caller_name='"+txtcalnm.getText()+"', comment='"+txtareacom.getText()+"', ticket_id='"+notic+"', _callback='"+callback+"', callback_time='"+cldt+" "+txtcalbac.getText()+"', _wrongnumber='"+wrongnum+"' where log_id='"+loid+"'";
                             sql="update log_phone set duration='"+lbldurasi.getText()+"', _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', caller_name='"+txtcalnm.getText()+"', comment='"+txtareacom.getText()+"'"
                                     + ", ticket_no="+notic+", ticket_id=(select ticket_id from tickets where ticket_no="+notic+")"
                                     + ", _wrongnumber='"+wrongnum+"', cust_name='"+cbServiceArea.getSelectedItem()+"', inbound_type='"+cbInbType.getSelectedItem()+"', contract_no="+IdCust+""
                                     + " where log_id='"+CCanj.loid+"'";
                             CCanj.jconn.SQLExecute(sql, CCanj.conn);
                            JOptionPane.showMessageDialog(null,"Data successfully updated");
                            xxx=0;
                            callback=0;blankcall=0;inquiry=0;complaint=0;wrongnum=0;
    //                     }else{
    //                         JOptionPane.showMessageDialog(null,"Data Incomplete, Please fill Date and time first");
    //                     }
                     }
                }
            }else{
                if(CCanj.inshow==true){
    //                sql="update log_phone set _blankcall=1, duration='"+lbldurasi.getText()+"', busy='"+busy+"', _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', caller_name='"+txtcalnm.getText()+"', comment='"+txtareacom.getText()+"', ticket_id='"+notic+"', _callback='"+callback+"', callback_time='"+cldt+" "+txtcalbac.getText()+"' where log_id='"+CCanj.loid+"'";
                    sql="update log_phone set _blankcall=1, _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', comment='"+txtareacom.getText()+"'"
                            + ", ticket_no="+notic+", ticket_id=(select ticket_id from tickets where ticket_no="+notic+")"
                            + ", cust_name='"+cbServiceArea.getSelectedItem()+"', inbound_type='"+cbInbType.getSelectedItem()+"', contract_no="+IdCust+""
                            + " where log_id='"+loid+"'";
                    CCanj.jconn.SQLExecute(sql, CCanj.conn);
//                    System.out.print(sql);
                    JOptionPane.showMessageDialog(null,"Data successfully updated");
                    xxx=0;
                    callback=0;blankcall=0;inquiry=0;complaint=0;wrongnum=0;
                    dispose();
                }else{
                    sql="update log_phone set _blankcall=1, duration='"+lbldurasi.getText()+"', _inquiry='"+inquiry+"', _complaint='"+complaint+"', caller_number='"+txtcalnum.getText()+"', caller_type='"+cbcaltype.getSelectedItem()+"', caller_name='"+txtcalnm.getText()+"', comment='"+txtareacom.getText()+"'"
                            + ", ticket_no="+notic+", ticket_id=(select ticket_id from tickets where ticket_no="+notic+")"
                            + ", cust_name='"+cbServiceArea.getSelectedItem()+"', inbound_type='"+cbInbType.getSelectedItem()+"', contract_no="+IdCust+""
                            + " where log_id='"+CCanj.loid+"'";
                    CCanj.jconn.SQLExecute(sql, CCanj.conn);
//                    System.out.print(sql);
                    JOptionPane.showMessageDialog(null,"Data successfully updated");
                    xxx=0;
                    callback=0;blankcall=0;inquiry=0;complaint=0;wrongnum=0;
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please input the Customer Company");
        }
    }//GEN-LAST:event_btnsaveActionPerformed

    private void btnsrchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsrchActionPerformed
        // TODO add your handling code here:
        Search_customer srcus= new Search_customer();
        srcus.setVisible(true);

        srcus.Form=2;
        srcus.txtcusnm.setText(cbServiceArea.getSelectedItem().toString());
        srcus.txtuser.setText(txtcalnm.getText());
        srcus.tabelcus();
//        srcus.tabeltic();
}//GEN-LAST:event_btnsrchActionPerformed

    private void tblcallMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblcallMouseClicked
        // TODO add your handling code here:
        if(tabcall.getRowCount()!=0){
            if(evt.getClickCount()==1){
                txtIdCust.setText((String)tblcall.getValueAt(tblcall.getSelectedRow(),tblcall.getTableHeader().getColumnModel().getColumnIndex("Contract No")));
                IdCust=(String)tblcall.getValueAt(tblcall.getSelectedRow(),tblcall.getTableHeader().getColumnModel().getColumnIndex("Contract No"));
                tabelcall();tabeltic();
            }
        }
}//GEN-LAST:event_tblcallMouseClicked

    private void tblticMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblticMouseClicked
        // TODO add your handling code here:
        if(tabtic.getRowCount()!=0){
            if(evt.getClickCount()==1){
                txtnotic.setText((String)tbltic.getValueAt(tbltic.getSelectedRow(),tbltic.getTableHeader().getColumnModel().getColumnIndex("Ticket No.")));
                ticid=Integer.parseInt((String)tbltic.getValueAt(tbltic.getSelectedRow(),tbltic.getTableHeader().getColumnModel().getColumnIndex("Ticket Id")));
            }else if(evt.getClickCount()==2){
                History hic = new History();
                hic.setVisible(true);

                hic.no=ticid;
                hic.ticid=Integer.valueOf((String)txtnotic.getText());
                hic.klik2();
            }
        }
}//GEN-LAST:event_tblticMouseClicked

    public static javax.swing.table.DefaultTableModel getDefaultTicHist(){
        return new javax.swing.table.DefaultTableModel(
                new Object [][]{},
                new String [] {"Ticket No.","Priority","Type","Status","No. Plat"
                        ,"Open By","Department","Assign Dept.","Assign User","Category"
                        ,"CSO name","Customer","Phone number","PIC","Jenis"
                        ,"Type","Tahun","Driver","Phone","Details"
                        ,"Solution","Ticket Id","Contract No"}){
                boolean[] canEdit=new boolean[]{
                    false,false,false,false,false,false
                            ,false,false,false,false,false
                            ,false,false,false,false,false
                            ,false,false,false,false,false
                            ,false,false,false
                };
                public boolean isCellEditable(int rowIndex, int columnIndex){
                        return canEdit[columnIndex];
                }
        };
    }
    public static javax.swing.table.DefaultTableModel tabtic=getDefaultTicHist();
    public static void tabeltic(){
        tabtic.setRowCount(0);
        try{
            x=0;
            sql="select tickets.*"
                    + ", a.dept_name as opdept "
                    + ", b.dept_name as asdept"
                    + ", _ticketstatus.data as stt"
                    + ", _ticketpriority.data as prior"
//                      + ", c.data as source"
//                      + ", d.data as bussline"
                    + " from tickets "
                    + " join _department a on tickets.dept_id=a.dept_id"
                    + " left join _department b on tickets.assign_dept=b.dept_id"
                    + " join _ticketstatus on tickets._status=_ticketstatus.code"
                    + " join _ticketpriority on tickets._priority=_ticketpriority.code"
//                      + " join _callertype c on tickets.source_id=c.code"
//                      + " join _bussinesline d on tickets.bussiness_line_id=d.code"
                    + " where ticket_id is not null";
//                    + " cust_phone like '%"+txtcalnum.getText()+"%' or cust_pic_phone like '%"+txtcalnum.getText()+"%' "
//                    + " or user_phone like '%"+txtcalnum.getText()+"%' or cso_phone like '%"+txtcalnum.getText()+"%' ";
            condition="";
            if(IdCust!=null||IdCust!=""){
                condition=condition+" and contract_no='"+IdCust+"' ";
            }
            sql=sql+condition+" order by ticket_id desc";
            rs=CCanj.jconn.SQLExecuteRS(sql, CCanj.conn);
//              System.out.println(" tichis : "+sql);

            while(rs.next()){
                tic[x]=rs.getString("ticket_no");x++;
                tic[x]=rs.getString("prior");x++;
                tic[x]=rs.getString("_type");x++;
                tic[x]=rs.getString("stt");x++;
                tic[x]=rs.getString("vehicle_platno");x++;

                tic[x]=rs.getString("open_username");x++;
                tic[x]=rs.getString("opdept");x++;
                tic[x]=rs.getString("asdept");x++;
                tic[x]=rs.getString("assign_username");x++;
                tic[x]=rs.getString("category");x++;

                tic[x]=rs.getString("cso_name");x++;
                tic[x]=rs.getString("cust_name");x++;
                tic[x]=rs.getString("cust_phone");x++;
                tic[x]=rs.getString("cust_pic");x++;
                tic[x]=rs.getString("vehicle_jenis");x++;

                tic[x]=rs.getString("vehicle_type");x++;
                tic[x]=rs.getString("vehicle_tahun");x++;
                tic[x]=rs.getString("driver_name");x++;
                tic[x]=rs.getString("driver_phone");x++;
                tic[x]=rs.getString("details");x++;

                tic[x]=rs.getString("solution");x++;
                tic[x]=rs.getString("ticket_id");x++;
                tic[x]=rs.getString("contract_no");x++;
                tabtic.addRow(tic);
                x=0;
            }
        }catch(Exception exc){
            System.err.println(exc.getMessage());
        }
    }

    public static javax.swing.table.DefaultTableModel getDefaultCallHist(){
        return new javax.swing.table.DefaultTableModel(
                new Object [][]{},
                new String [] {"Media","Direction","Date","Time","Username"     ,"Status","Type","Caller Name","Comment","Ticket No"
                        ,"Contract No"}){
                boolean[] canEdit=new boolean[]{
                    false,false,false,false,false,false     ,false,false,false,false,false
                        ,false
                };
                public boolean isCellEditable(int rowIndex, int columnIndex){
                        return canEdit[columnIndex];
                }
        };
    }
    public static javax.swing.table.DefaultTableModel tabcall=getDefaultCallHist();
    public static void tabelcall(){
        tabcall.setRowCount(0);
        try{
            x=0;
            sql="select tmp.* from"
                    + " (select 'Call' as Media, _direction.data as Direction"
                    + ", log_date as 'Date', log_time as 'Time'"
                    + ", username, _callstatus.data as stt"
                    + ", caller_type as 'Type', caller_name"
                    + ", comment as 'note', ifnull(log_phone.ticket_no,tickets.ticket_no) as ticket"
                    + ", log_phone.contract_no"
                    + " from log_phone "
                    + " join _direction on log_phone._direction=_direction.code"
                    + " left join _callstatus on log_phone._callstatus=_callstatus.code"
                    + " left join tickets on log_phone.ticket_id=tickets.ticket_id"
                    + " where caller_number like '%"+txtcalnum.getText()+"%' or phone_number like '%"+txtcalnum.getText()+"%' or log_phone.contract_no='"+IdCust+"'"
                    + " UNION"
                    + " select 'SMS' as Media, _direction.data as Direction"
                    + ", sms_date, sms_time"
                    + ", username"
                    + ", case _direction"
                    + "  when 0 then rcvd_status.data "
                    + "  when 1 then send_status.data "
                    + "  end as stt"
                    + ", direction_type as 'Type', ''"
                    + ", sms_text as 'note', ifnull(log_sms.ticket_no,tickets.ticket_no) as ticket"
                    + ", log_sms.contract_no"
                    + " from log_sms"
                    + " join _direction on log_sms._direction=_direction.code"
                    + " join rcvd_status on log_sms._status=rcvd_status.code"
                    + " join send_status on log_sms._status=send_status.code"
                    + " left join tickets on log_sms.ticket_id=tickets.ticket_id"
                    + " where sms_to like '%"+txtcalnum.getText()+"%' or sms_from like '%"+txtcalnum.getText()+"%' or log_sms.contract_no='"+IdCust+"' ) as tmp"
                    + " order by tmp.Date desc,tmp.Time desc";
            rs=CCanj.jconn.SQLExecuteRS(sql, CCanj.conn);
//              System.out.println(sql);

            while(rs.next()){
                cus[x]=rs.getString("Media");x++;
                cus[x]=rs.getString("Direction");x++;
                cus[x]=rs.getString("Date");x++;
                cus[x]=rs.getString("Time");x++;
                cus[x]=rs.getString("username");x++;

                cus[x]=rs.getString("stt");x++;
                cus[x]=rs.getString("Type");x++;
                cus[x]=rs.getString("caller_name");x++;
                cus[x]=rs.getString("note");x++;
                cus[x]=rs.getString("ticket");x++;

                cus[x]=rs.getString("contract_no");x++;
                tabcall.addRow(cus);
                x=0;
            }
        }catch(Exception exc){
            System.err.println(exc.getMessage());
        }
    }

    private void tbcus(javax.swing.JTable tb, int lebar[]){
        tb.setAutoResizeMode(tb.AUTO_RESIZE_OFF);
        int kolom=tb.getColumnCount();
        for (int i=0;i<kolom;i++){
            javax.swing.table.TableColumn tbc=tb.getColumnModel().getColumn(i);
            tbc.setPreferredWidth(lebar[i]);
            tb.setRowHeight(17);
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InBoundCall().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnHangUp;
    private javax.swing.JButton btnexpand;
    private javax.swing.JButton btnmute;
    private javax.swing.JButton btnopentic;
    private javax.swing.JButton btnreset;
    private javax.swing.JButton btnsave;
    private javax.swing.JButton btnsrch;
    public static javax.swing.JComboBox cbInbType;
    public static javax.swing.JComboBox cbServiceArea;
    public static javax.swing.JComboBox cbcaltype;
    public static javax.swing.JCheckBox ckblank;
    public static javax.swing.JCheckBox ckcompl;
    public static javax.swing.JCheckBox ckinqui;
    public static javax.swing.JCheckBox ckwrongno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JLabel lbldurasi;
    private javax.swing.JTable tblcall;
    private javax.swing.JTable tbltic;
    public static javax.swing.JTextField txtIdCust;
    public static javax.swing.JTextArea txtareacom;
    public static javax.swing.JTextField txtcalnm;
    public static javax.swing.JTextField txtcalnum;
    public static javax.swing.JTextField txtlogid;
    public static javax.swing.JTextField txtlogid1;
    public static javax.swing.JTextField txtlogid2;
    public static javax.swing.JTextField txtlogid3;
    public static javax.swing.JTextField txtnotic;
    // End of variables declaration//GEN-END:variables


    public static  String sql, sql1, sqlid;
    public static  ResultSet rs;
    public static long startTime = 0;
    public static long stopTime = 0;
    public static long acwstartTime = 0;
    public static long acwstopTime = 0;
    public static boolean running = false;


    public static void cek(){
          if(wrongnum==1){
            ckwrongno.setSelected(true);
        }
        if(complaint==1){
            ckcompl.setSelected(true);
        }
        if(inquiry==1){
            ckinqui.setSelected(true);
        }
//        if(callback==1){
//            ckcalbac.setSelected(true);
//            txtcalbac.setEnabled(true);
//            date.setEnabled(true);
//        }
        if (blankcall==1){
            ckblank.setSelected(true);
            ckinqui.setEnabled(false);
            ckcompl.setEnabled(false);
//            ckcalbac.setEnabled(false);
        }
         if (lbldurasi.getText().equals("")){
             System.out.print("Proses cek durasi");
            start();
             System.out.print("start timer");
            ti= new Timer(1000, duration);
            ti.start();
            xx=1;
            xxx=1;
            btnHangUp.setEnabled(true);
        }
    }

    public void dataregis(){
          try{
             int row=0;
              sql="select pabx_host, inbound_ext, outbound_ext from user_account where username='"+CCanj.lbluser.getText()+"'";
              rs=CCanj.jconn.SQLExecuteRS(sql, CCanj.conn);
//              System.out.println(sql);

            while(rs.next()){
                pabx=rs.getString(1);
                in_ext=rs.getString(2);
                out_ext=rs.getString(3);
            }
        }catch(Exception exc){
            System.err.println(exc.getMessage());
        }
    }        
      
    public static void start() {
        InBoundCall.startTime = System.currentTimeMillis();
    }


    public static void stop() {
        InBoundCall.stopTime = System.currentTimeMillis();
    }


    //elaspsed time in seconds
    public static long duration() {
        if (running) {
            elapsed = ((stopTime - startTime) / 1000);
        }
        else {
            elapsed = ((System.currentTimeMillis() - startTime) / 1000);

                long hours = elapsed / 3600,
                remainder = elapsed % 3600,
                minutes = remainder / 60,
                seconds = remainder % 60;

                String ho=(hours<10 ? "0" : "")+hours,
                menit=(minutes<10 ? "0" : "")+minutes,
                detik=(seconds<10 ? "0" : "")+seconds;
        lbldurasi.setText(ho+":"+menit+":"+detik);
        }
        return elapsed;
    }

    public static Action duration = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                duration();
            }
       };

    public static void acwstart() {
        InBoundCall.acwstartTime = System.currentTimeMillis();
    }


    public static void acwstop() {
        InBoundCall.acwstopTime = System.currentTimeMillis();
    }

    public static long acw() {
        if (running) {
            busy = ((acwstopTime - acwstartTime) / 1000);
        }
        else {
            busy = ((System.currentTimeMillis() - acwstartTime) / 1000);
        }
        return busy;
    }

    public static Action acw = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                acw();
            }
       };
                    private void ambilTgl(){
                GregorianCalendar now=new GregorianCalendar();
                int tgl=now.get(now.DATE);
                int bln=now.get(now.MONTH)+1;
                int thn=now.get(now.YEAR);
                int h=now.get(now.HOUR);
                int m=now.get(now.MINUTE);
                int s=now.get(now.SECOND);


//    txtcalbac.setText(String.valueOf(h)+String.valueOf(m)+String.valueOf(s));
}
                    String optm, opdt;
    private void optm(){
          try{
              sql="select CURRENT_TIME";
              rs = CCanj.jconn.SQLExecuteRS(sql, CCanj.conn);
              while(rs.next()){
                  optm=rs.getString(1);
              }
//            txtcalbac.setText(optm);
          }catch(Exception exc){
              System.err.println(exc.getMessage());
          }
    }
    private void opdt(){
          try{
              sql="select CURRENT_DATE";
              rs = CCanj.jconn.SQLExecuteRS(sql, CCanj.conn);
              while(rs.next()){
                  opdt=rs.getString(1);
              }
          }catch(Exception exc){
              System.err.println(exc.getMessage());
          }
    }
    private void showCaltype(){
        try{
            cbcaltype.removeAllItems();

            sql="select data from _callertype order by code";
            rs=CCanj.jconn.SQLExecuteRS(sql,CCanj.conn);
            while(rs.next()){
                cbcaltype.addItem(rs.getString(1));
            }
        }catch(Exception e){
            System.out.println(e);

        }
    }
    private void showCust(){
        try{
            cbServiceArea.removeAllItems();

            sql="select data from _servicearea order by code";
            rs=CCanj.jconn.SQLExecuteRS(sql,CCanj.conn);
            while(rs.next()){
                cbServiceArea.addItem(rs.getString(1));
            }
            cbServiceArea.setSelectedIndex(-1);
        }catch(Exception e){
            System.out.println(e);

        }
    }
    private void showType(){
          cbInbType.removeAllItems();
          try{
              sql="select data from _tickettype where code > 1 order by code";
              rs=CCanj.jconn.SQLExecuteRS(sql,CCanj.conn);
              while(rs.next()){
                  cbInbType.addItem(rs.getString(1));
              }
              cbInbType.setSelectedIndex(-1);
          }catch(Exception e){
              System.out.println(e);
          }
      }
}